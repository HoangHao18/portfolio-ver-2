// // /*
// // Auto-generated by: https://github.com/pmndrs/gltfjsx
// // Author: hyti131 (https://sketchfab.com/hyti131)
// // License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// // Source: https://sketchfab.com/3d-models/watering-pot-8a7627327df5436d9f39b6d470d491db
// // Title: Watering Pot
// // */

import { useGLTF } from '@react-three/drei'
import { useThree } from '@react-three/fiber'
import { useGesture } from '@use-gesture/react'
import gsap from 'gsap'
import { useEffect, useRef } from 'react'
import * as THREE from 'three'

const VoxelWateringPot = (props) => {
  const { nodes, materials } = useGLTF('/models/voxel_watering_pot.glb')
  const groupRef = useRef()
  const potRef = useRef()

  const pouringInterval = useRef(null)
  const waterParticles = useRef([]) // mảng chứa các hạt

  const { size, viewport } = useThree()
  const initialPos = useRef(props.position || [0, 0, 0])

  // Set vị trí ban đầu
  useEffect(() => {
    if (groupRef.current) {
      groupRef.current.position.set(...initialPos.current)
    }
  }, [props.position])

  const startPouring = () => {
    if (!groupRef.current || !potRef.current) return

    if (pouringInterval.current) clearInterval(pouringInterval.current)

    pouringInterval.current = setInterval(() => {
      const createDrop = (xOffset = 0) => {
        const geometry = new THREE.BoxGeometry(0.02, 0.1, 0.02)
        const material = new THREE.MeshStandardMaterial({
          color: 'skyblue',
          transparent: true,
          opacity: 0.7,
        })
        const drop = new THREE.Mesh(geometry, material)

        // Lấy vị trí đầu vòi của potRef trong local space của groupRef
        const localPos = new THREE.Vector3()
        potRef.current.getWorldPosition(localPos)
        groupRef.current.worldToLocal(localPos)

        // Offset dòng chính + lệch x theo offset truyền vào
        localPos.x = localPos.x - initialPos.current[0] + 9.1 + xOffset
        localPos.y = localPos.y - initialPos.current[1] + 3.9
        localPos.z = localPos.z - initialPos.current[2] + 0.2

        drop.position.copy(localPos)
        groupRef.current.add(drop)
        waterParticles.current.push(drop)

        // Convert targetY từ world sang local
        const worldTarget = new THREE.Vector3(
          drop.position.x,
          props.targetY, // world Y
          drop.position.z,
        )
        groupRef.current.worldToLocal(worldTarget)

        gsap.to(drop.position, {
          y: worldTarget.y + 0.2,
          duration: 0.8,
          ease: 'power1.in',
          onComplete: () => {
            groupRef.current.remove(drop)
            drop.geometry.dispose()
            drop.material.dispose()
            waterParticles.current = waterParticles.current.filter((d) => d !== drop)
          },
          //check Bee <--
          //check Bee -->
        })
      }

      // Tạo 2 hạt nước: giữa, phải
      createDrop(0) // chính giữa
      //createDrop(-0.05) // lệch trái
      createDrop(0.05) // lệch phải
    }, 100)
  }

  const stopPouring = () => {
    if (pouringInterval.current) {
      clearInterval(pouringInterval.current)
      pouringInterval.current = null
    }
  }

  const bind = useGesture({
    onDrag: ({ offset: [x, y], event }) => {
      event.stopPropagation()
      if (!groupRef.current) return

      const aspect = size.width / viewport.width
      const dx = x / aspect
      const dy = -y / aspect

      gsap.to(groupRef.current.position, {
        x: initialPos.current[0] + dx,
        y: initialPos.current[1] + dy,
        z: initialPos.current[2],
        duration: 0.3,
        ease: 'power2.out',
      })
    },

    onPointerDown: ({ event }) => {
      if (event.buttons === 1) startPouring()
    },

    onPointerUp: stopPouring,
    onPointerLeave: stopPouring,
  })

  return (
    <group ref={groupRef} {...props}>
      <mesh
        ref={potRef}
        geometry={nodes.Object_2.geometry}
        material={materials.palette}
        rotation={[-1.55, -0.6, 1.98]}
        {...bind()} // Gesture gắn vào mesh bình
      />
    </group>
  )
}

useGLTF.preload('/models/voxel_watering_pot.glb')
export default VoxelWateringPot
